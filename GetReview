#!/usr/bin/env python

import sys
import csv
import os
import pandas as pd
from pandas.tseries.holiday import USFederalHolidayCalendar
from pandas.tseries.offsets import CustomBusinessDay

def main():

	# checks correct number of arguments
	if len(sys.argv) != 2:
		sys.exit("ALERT: Usage Error - Incorrect number of arguments. Run GetReview with [-h] to see proper command syntax.")
	# help option
	elif sys.argv[1] == "-h":
		print " Correct usage: ./GetReivew [foo.csv]"
		print " * Note: csv file should be a Workable Activity Report, refer to README for details"
	# checks for correct filetype
	elif sys.argv[1].endswith('.csv'):
		if not correctFilename(sys.argv[1]):
			sys.exit(" Please make sure your input file is correctly named.")
		with open(sys.argv[1], 'r') as csvInput:
			report = csv.reader(csvInput) # for reading in activity report
			header = next(report) # getting first line of activity report
			data = list(report)
			checkedHeader = checkCategories(header)
			today = str(pd.datetime.today().date())
			if checkedHeader != 0:
				with open('%s WorkableOverview.csv' %today, 'w') as csvOutput, open('%s WorkableSummary.csv' %today, 'w') as csvSummary, open('%s WorkableJobProgress.csv' %today, 'w') as csvJobProgress:
					outfile = csv.writer(csvOutput) # fully parsed report will end up here
					summary = csv.writer(csvSummary)
					jobProgress = csv.writer(csvJobProgress)
					trackInterviews(data, outfile)
					trackSendouts(data, outfile)
					csvOutput.close()
					sortOut(checkedHeader, today, sys.argv[1])
					makeSummary(summary, sys.argv[1], today)
					csvSummary.close()
					makeJobProg(jobProgress, today, sys.argv[1])
					csvJobProgress.close()
					os.system("./Format " + today + "\ WorkableOverview.csv")
					os.system("./Format " + today + "\ WorkableSummary.csv")
					os.system("./Format " + today + "\ WorkableJobProgress.csv")
					print "Full Review is in " + today + " WorkableOverview.csv. Summary is in " + today + " WorkableSummary.csv. Job Progress is in " + today + " WorkableJobProgress.csv. Formated files are in their .xlsx counterparts!" 
	else:
		sys.exit("ALERT: Usage Error - Incorrect file type. Run GetReview with [-h] for proper command syntax.")
	sys.exit(0)

def correctFilename(filename):
	test = filename.split("_")
	if len(test) == 4 and test[0] == "activity" and test[1] == "report":
		initSplit = test[3].split(".")
		if len(initSplit) == 2 and initSplit[1] == "csv":
			fSplit = test[2].split("-")
			sSplit = initSplit[0].split("-")
			if len(fSplit) == 3 and len(sSplit) == 3:
				counter = 0
				if fSplit[0].isdigit() and len(fSplit[0]) == 4 and sSplit[0].isdigit() and len(sSplit[0]) == 4:
					for x in range (1,3):
						if fSplit[x].isdigit() and len(fSplit[x]) == 2:
							counter += 1
						if sSplit[x].isdigit() and len(sSplit[x]) == 2:
							counter +=1
					if counter == 4:
						return True
	return False

# checks that activity report has expected categories
def checkCategories(header):

	with open('header.csv', 'r') as toMatch:
		match = csv.reader(toMatch)
		correctHeader = next(match)
	if header != correctHeader:
		sys.exit("ALERT: Usage Error - Incorrect csv file format. Run with [-h] for proper usage instructions.")
	return correctHeader

# writes each interviewed candidate into parsed_report.csv
def trackInterviews(report, outfile):	

	for row in report:
		for field in row:
			if (field == "Moved to stage Screened"):
				outfile.writerow(row)

# writes each send-out candidate into parsed_report.csv
def trackSendouts(report, outfile):

	for row in report:
		for field in row:
			if field == "Moved to stage Interview":
				outfile.writerow(row)

# sorts parsed_report.csv by recruiter and position
def sortOut(checkedHeader, today, filename):

	with open('%s WorkableOverview.csv' %today, 'r') as csvOut:
		reader = csv.reader(csvOut)
		sortedList = sorted(reader, key=lambda row: (row[0], row[3], row[4])) # sorting list
	csvOut.close()
	with open('%s WorkableOverview.csv' %today, 'w') as csvOutput:
		outfile = csv.writer(csvOutput)
		outfile.writerow(checkedHeader) # writing categories
		for row in sortedList:
			outfile.writerow(row) # writing sorted list

		initSplit = filename.split("_")
		secSplit = initSplit[3].split(".")
		fDate = initSplit[2] # "first date" - start date
		sDate = secSplit[0] # "second date" - end date

		reportRange  = str(fDate) + "-" + str(sDate)
		date = "Date Ran: " + str(today)

		outfile.writerow(' ')
		outfile.writerow(['Overview', 'Activity Dates: ', reportRange, date])		


# writes summary file
def makeSummary(summary, filename, today):

	recruiter = "No One"
	iCount = 0
	sCount = 0
	bdays = calcBdays(filename)

	# creating categories
	summary.writerow(['Name', 'Number of Interviews', 'Number of Send-outs', 'Interview Average', 'Send-out Average', 'Number of Business Days'])
	
	with open('%s WorkableOverview.csv' %today, 'r') as parsedReport:
		report = csv.reader(parsedReport)
		next(report) # header
		first = next(report) # first line
		# first recruiter
		recruiter = first[0]
		if (first[1] == "Moved to stage Screened"):
			iCount += 1
		else:
			sCount += 1
		for row in report:
			if row[0] == " ":
				summary.writerow([recruiter, iCount, sCount, round(iCount/float(bdays), 1), round(sCount/float(bdays), 1), bdays])
				break
			elif row[0] == recruiter: # checking if recording for same recruiter
				if (row[1] == "Moved to stage Screened"): # interview
					iCount += 1
				if row[1] == "Moved to stage Interview": # send-out
					sCount +=1
			else: 
				# creating summary for one recruiter
				summary.writerow([recruiter, iCount, sCount, round(iCount/float(bdays), 1), round(sCount/float(bdays), 1), bdays])
				# starting new recruiter 
				recruiter = row[0]
				if row[1] == ("Moved to stage Screened"):
					iCount = 1
					sCount = 0
				if row[1] == "Moved to stage Interview":
					sCount =1
					iCount = 0

		initSplit = filename.split("_")
		secSplit = initSplit[3].split(".")
		fDate = initSplit[2] # "first date" - start date
		sDate = secSplit[0] # "second date" - end date

		reportRange  = str(fDate) + "-" + str(sDate)
		date = "Date Ran: " + str(today)

		summary.writerow(' ')
		summary.writerow(['Summary', 'Activity Dates:', reportRange, date])

def calcBdays(filename):

	initSplit = filename.split("_")
	secSplit = initSplit[3].split(".")
	fDate = initSplit[2] # "first date" - start date
	sDate = secSplit[0] # "second date" - end date
	us_bd = CustomBusinessDay(calendar=USFederalHolidayCalendar())
	return pd.DatetimeIndex(start=fDate,end=sDate, freq=us_bd).shape[0]

def makeJobProg(jobProgress, today, filename):

	recruiter = "No One"
	job = "None"
	iCount = 0
	sCount = 0

	jobProgress.writerow(['Recruiter', 'Job', 'Number of Interviews', 'Number of Send-outs'])
	with open('%s WorkableOverview.csv' %today, 'r') as parsedReport:
		report = csv.reader(parsedReport)
		next(report) # header
		first = next(report) # first line
		recruiter = first[0]
		job = first[3]
		if (first[1] == "Moved to stage Screened"):
			iCount += 1
		else:
			sCount += 1		
		for row in report:
			if row[0] == " ":
				jobProgress.writerow([recruiter, job, iCount, sCount])
				break
			elif row[0] == recruiter: # checking if recording for same recruiter
				if row[3] == job: # checking if recording for same job
					if (row[1] == "Moved to stage Screened"): # interview
						iCount += 1
					if row[1] == "Moved to stage Interview": # send-out
						sCount +=1
				else:
					jobProgress.writerow([recruiter, job, iCount, sCount])
					job = row[3]
					if (row[1] == "Moved to stage Screened"):
						iCount = 1
						sCount = 0
					else:
						iCount = 0
						sCount = 1
			else:
				jobProgress.writerow([recruiter, job, iCount, sCount])
				recruiter = row[0]
				job = row[3]
				if (row[1] == "Moved to stage Screened"):
					iCount = 1
					sCount = 0
				else:
					iCount = 0
					sCount = 1

		initSplit = filename.split("_")
		secSplit = initSplit[3].split(".")
		fDate = initSplit[2] # "first date" - start date
		sDate = secSplit[0] # "second date" - end date

		reportRange  = str(fDate) + "-" + str(sDate)
		date = "Date Ran: " + str(today)

		jobProgress.writerow(' ')
		jobProgress.writerow(['Job Progress', 'Actvity Dates: ', reportRange, date])		


# Standard boilerplate to call the main() function to begin
# the program.
if __name__ == '__main__':
	main()
